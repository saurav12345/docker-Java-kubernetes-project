pipeline {
    agent any
    tools {
        maven "Maven3"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/saurav12345/docker-Java-kubernetes-project']])
            }
        }
        
        // stage('build && SonarQube analysis') {
        //     steps {
        //         withSonarQubeEnv('My SonarQube Scanner') {
        //             // Optionally use a Maven environment you've configured already
        //             //withMaven(maven:'Maven 3.5') {
        //                 sh 'java -version && cd ./productcatalogue && pwd && mvn clean package sonar:sonar'
        //             //}
        //         }
        //     }
        // }
        // stage("Quality Gate") {
        //     steps {
        //         timeout(time: 1, unit: 'HOURS') {
        //             // Parameter indicates whether to set pipeline to UNSTABLE if Quality Gate fails
        //             // true = set pipeline to UNSTABLE, false = don't
        //             waitForQualityGate abortPipeline: true
        //         }
        //     }
        // }
        
//         stage('Sonarqube') {
//     environment {
//         scannerHome = tool 'SonarQubeScanner'
//     }
//     steps {
//         withSonarQubeEnv('sonarqube') {
//             sh "${scannerHome}/bin/sonar-scanner"
//         }
//         timeout(time: 10, unit: 'MINUTES') {
//             waitForQualityGate abortPipeline: true
//         }
//     }
// }
        
        // stage("build & SonarQube analysis") {
        //     //agent any
        //     steps {
        //       withSonarQubeEnv(credentialsId: 'sonar_token', installationName: 'SonarQube Scanner for Jenkins') {
        //         sh 'java -version && cd ./productcatalogue && pwd && mvn clean package sonar:sonar'
        //         }
        //     }
        // }
        
        // stage("Quality Gate") {
        //     steps {
        //       timeout(time: 1, unit: 'HOURS') {
        //         waitForQualityGate abortPipeline: true
        //         }
        //     }
        // }
        
        stage ("SonarQube Analysis") { 
            steps {
            //def mvn = tool 'Default Maven'; 
            withSonarQubeEnv('My SonarQube Scanner') { 
                sh "cd ./productcatalogue && mvn clean verify sonar:sonar -Dsonar.projectKey=productcatalouge" 
                } 
            }
        }
        
        // stage("Quality Gate") {
        //     steps {
        //         timeout(time: 1, unit: 'HOURS') {
        //             // Parameter indicates whether to set pipeline to UNSTABLE if Quality Gate fails
        //             // true = set pipeline to UNSTABLE, false = don't
        //             waitForQualityGate abortPipeline: true
        //         }
        //     }
        // }
        
        stage('App Build') {
            steps {
                sh "cd ./productcatalogue && mvn clean install"
            }
        }
        
        stage('Build Image') {
            steps {
                    sh 'cd ./productcatalogue && docker image build -t jenkinsserver.azurecr.io/productcatalouge:latest .'
            }   
        }
        
        stage('ACR Push') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'ACR', passwordVariable: 'password', usernameVariable: 'username')]) {
                    sh 'docker login -u ${username} -p ${password} jenkinsserver.azurecr.io'
                    sh "docker image push jenkinsserver.azurecr.io/productcatalouge:latest"   
                }
            }
        }
            
        stage('Deploy To AKS') {
            steps {
                withKubeConfig(caCertificate: '', clusterName: '', contextName: '', credentialsId: 'AKS', namespace: '', restrictKubeConfigAccess: false, serverUrl: '') {
                    sh 'cd ./kubernetes && kubectl delete -f productcatalogue-service.yaml && kubectl apply -f productcatalogue-service.yaml'
                }
            }
        }
        
        stage ("SonarQube Analysis1") { 
            steps {
            //def mvn = tool 'Default Maven'; 
            withSonarQubeEnv('My SonarQube Scanner') { 
                sh "cd ./shopfront && mvn clean verify sonar:sonar -Dsonar.projectKey=shopfront" 
                } 
            }
        } 
        
        // stage("Quality Gate1") {
        //     steps {
        //         timeout(time: 1, unit: 'HOURS') {
        //             // Parameter indicates whether to set pipeline to UNSTABLE if Quality Gate fails
        //             // true = set pipeline to UNSTABLE, false = don't
        //             waitForQualityGate abortPipeline: true
        //         }
        //     }
        // }
        
        stage('App Build1') {
            steps {
                sh "cd ./shopfront && mvn clean install"
            }
        }
        
        stage('Build Image1') {
            steps {
                    sh 'cd ./shopfront && docker image build -t jenkinsserver.azurecr.io/shopfront:latest .'
            }   
        }
        
        stage('ACR Push1') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'ACR', passwordVariable: 'password', usernameVariable: 'username')]) {
                    sh 'docker login -u ${username} -p ${password} jenkinsserver.azurecr.io'
                    sh "docker image push jenkinsserver.azurecr.io/shopfront:latest"   
                }
            }
        }
        
        stage('Deploy To AKS1') {
            steps {
                withKubeConfig(caCertificate: '', clusterName: '', contextName: '', credentialsId: 'AKS', namespace: '', restrictKubeConfigAccess: false, serverUrl: '') {
                    sh 'cd ./kubernetes && kubectl delete -f shopfront-service.yaml && kubectl apply -f shopfront-service.yaml'
                }
            }
        }
        
        stage ("SonarQube Analysis2") { 
            steps {
            //def mvn = tool 'Default Maven'; 
            withSonarQubeEnv('My SonarQube Scanner') { 
                sh "cd ./stockmanager && mvn clean verify sonar:sonar -Dsonar.projectKey=sonarqube_test-project" 
                } 
            }
        } 
        
        // stage("Quality Gate2") {
        //     steps {
        //         timeout(time: 1, unit: 'HOURS') {
        //             // Parameter indicates whether to set pipeline to UNSTABLE if Quality Gate fails
        //             // true = set pipeline to UNSTABLE, false = don't
        //             waitForQualityGate abortPipeline: true
        //         }
        //     }
        // }
        
        stage('App Build2') {
            steps {
                sh "cd ./stockmanager && mvn clean install"
            }
        }
        
        stage('Build Image2') {
            steps {
                    sh 'cd ./stockmanager && docker image build -t jenkinsserver.azurecr.io/stockmanager:latest .'
            }   
        }
        
        stage('ACR Push2') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'ACR', passwordVariable: 'password', usernameVariable: 'username')]) {
                    sh 'docker login -u ${username} -p ${password} jenkinsserver.azurecr.io'
                    sh "docker image push jenkinsserver.azurecr.io/stockmanager:latest"   
                }
            }
        }
        
        stage('Deploy To AKS2') {
            steps {
                withKubeConfig(caCertificate: '', clusterName: '', contextName: '', credentialsId: 'AKS', namespace: '', restrictKubeConfigAccess: false, serverUrl: '') {
                    sh 'cd ./kubernetes && kubectl delete -f stockmanager-service.yaml && kubectl apply -f stockmanager-service.yaml'
                }
            }
        }
    }
}
